/*********** *SÉQUNECES *****************/
CREATE SEQUENCE BO.code_membre_seq
INCREMENT BY 5
START WITH 5 
MINVALUE  5
MAXVALUE 10000;

--------------------------------------------------------
--  DDL for Table MEMBRES
--------------------------------------------------------
PROMPT Création de la table membres;
CREATE TABLE BO.membres (
    id                   NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 ),
    code                 CHAR(12) NOT NULL UNIQUE
                                  CONSTRAINT code_format_chck 
                                  CHECK (REGEXP_LIKE(code, '^[A-Za-z]{4}\d{8}$')),
    prenom               VARCHAR2(50 BYTE) NOT NULL,
    nom                  VARCHAR2(50 BYTE) NOT NULL,
    genre                CHAR(1 CHAR)
                                  CONSTRAINT genre_format_chck 
                                  CHECK (genre IN ('M', 'F', 'X')),
    date_naissance       DATE,
    courriel             VARCHAR2(50 BYTE) NOT NULL,
    adresse_ligne1      VARCHAR2(50 BYTE),
    adresse_ligne2      VARCHAR2(50 BYTE),
    ville                VARCHAR2(50 BYTE) DEFAULT 'Québec',
    province             VARCHAR2(50 BYTE) DEFAULT 'Québec',
    code_postal          VARCHAR2(50 BYTE),
    pays                 VARCHAR2(50 BYTE) DEFAULT 'Canada'
                                  CONSTRAINT pays_format_chck 
                                  CHECK (pays IN ('Canada', 'États-Unis', 'Mexique')),
    telephone            VARCHAR2(50 BYTE)
                                  CONSTRAINT telephone_format_chck 
                                  CHECK (REGEXP_LIKE(telephone, '^\d{3}-\d{3}-\d{4}$')),
    date_debut_membre    DATE,
    statut_membre        VARCHAR2(15 BYTE),
    theme_prefere        VARCHAR2(15 BYTE)
);
CREATE INDEX membres_nom_complet_i
ON BO.membres(prenom, nom);
COMMENT ON COLUMN BO.membres.code IS
    'Le code de membre doit être 4 lettres suivies de 8 chiffres, il ne peut pas être null et doit être unique';
COMMENT ON COLUMN BO.membres.prenom IS
    'Le prénom est requis';
COMMENT ON COLUMN BO.membres.nom IS
    'Le nom est requis';
COMMENT ON COLUMN BO.membres.pays IS
    'Les pays doivent être dans les choix suivant: Canada, États-Unis, Mexique';
COMMENT ON COLUMN BO.membres.genre IS
    'Le genre des personnes doivent être dans les choix suivant: M, F, X';
COMMENT ON COLUMN BO.membres.telephone IS
    'Les numéros de téléphone doivent avoir le format suivant : 000-000-0000 ';

--------------------------------------------------------
--  DDL for Table AUTEURS
--------------------------------------------------------
PROMPT Création de la table auteurs;
CREATE TABLE BO.auteurs (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 ),
    nom_auteur      VARCHAR2(100 BYTE) NOT NULL
);
COMMENT ON COLUMN BO.auteurs.nom_auteur IS
    'Le nom auteur est requis';
--------------------------------------------------------
--  DDL for Table SECTIONS
--------------------------------------------------------
PROMPT Création de la table sections;
CREATE TABLE BO.sections (
    id              NUMBER(3)
                        CONSTRAINT check_section_id_range 
                        CHECK (id BETWEEN 0 AND 999),
    nom             VARCHAR2(100 BYTE) NOT NULL,
    description     VARCHAR2(255 BYTE)
);
COMMENT ON COLUMN BO.sections.nom IS
    'Le nom auteur est requis';
--------------------------------------------------------
--  DDL for Table GENRES
--------------------------------------------------------
PROMPT Création de la table genres;
CREATE TABLE BO.genres (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 ),
    nom_genre       VARCHAR2(50 BYTE) NOT NULL
);
CREATE INDEX genres_nom_i
ON BO.genres(nom_genre);
COMMENT ON COLUMN BO.genres.nom_genre IS
    'Le nom du genre auteur est requis';

--------------------------------------------------------
--  DDL for Table LIVRES
--------------------------------------------------------
PROMPT Création de la table livres;
CREATE TABLE BO.livres (
    id                   NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 ),
    sections_id          NUMBER(3) NOT NULL,
    auteurs_id           NUMBER NOT NULL,
    genres_id            NUMBER NOT NULL,
    isbn                 VARCHAR2(50 BYTE) NOT NULL,
    titre                VARCHAR2(50 BYTE) NOT NULL,
    maison_edition       VARCHAR2(50 BYTE),
    annee_publication    NUMBER(4),
    langage              VARCHAR2(50 BYTE),
    prix                 NUMBER(5,2)
);
CREATE INDEX livres_isbn_i
ON BO.livres(isbn);
COMMENT ON COLUMN BO.livres.sections_id IS
    'Les sections_id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id ne peut pas être null. Le sections_id est auto-généré dans la table Sections.';
COMMENT ON COLUMN BO.livres.auteurs_id IS
    'Les auteurs_id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id ne peut pas être null. Le auteurs_id est auto-généré dans la table Auteurs.';
COMMENT ON COLUMN BO.livres.genres_id IS
    'Les genres_id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id ne peut pas être null. Le genres_id est auto-généré dans la table Genres.';
COMMENT ON COLUMN BO.livres.isbn IS
    'Le isbn du genre auteur est requis';
COMMENT ON COLUMN BO.livres.titre IS
    'Le titre du genre auteur est requis';
--------------------------------------------------------
--  DDL for Table EMPRUNTS
--------------------------------------------------------
PROMPT Création de la table emprunts;
CREATE TABLE BO.emprunts (
    id                   NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 ),
    livres_id            NUMBER NOT NULL,
    membres_id           NUMBER NOT NULL,
    date_emprunt         DATE NOT NULL,
    date_retour_prevu    DATE GENERATED ALWAYS AS (date_emprunt + 21) VIRTUAL,
    date_retour          DATE
);
COMMENT ON COLUMN BO.emprunts.livres_id IS
    'Les id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id est auto-généré.';
COMMENT ON COLUMN BO.emprunts.livres_id IS
    'Les livres_id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id ne peut pas être null. Le livres_id est auto-généré dans la table Livres.';
COMMENT ON COLUMN BO.emprunts.membres_id IS
    'Les membres_id commence au nombre 1 et se trouve a être un chiffre sans virgule. Le id ne peut pas être null. Le membres_id est auto-généré dans la table Membres.';
COMMENT ON COLUMN BO.emprunts.date_emprunt IS
    'La date ne peut pas être null et est en format YYYY-MM-DD.';
COMMENT ON COLUMN BO.emprunts.date_retour_prevu IS
    'La colonne DATE_RETOUR_PREVU doit être calculée automatiquement de la façon suivante : DATE_EMPRUNT + 21 (colonne virtuelle calculée. et est en format YYYY-MM-DD.';
COMMENT ON COLUMN BO.emprunts.date_retour IS
    'La date peut être null et est en format YYYY-MM-DD.';     

/*********** CONTRAINTES *****************/

--------------------------------------------------------
--  Constraints for Table membres
--------------------------------------------------------
ALTER TABLE BO.membres ADD CONSTRAINT MEMBRES_PK PRIMARY KEY (id);

--------------------------------------------------------
--  Constraints for Table auteurs
--------------------------------------------------------
ALTER TABLE BO.auteurs ADD CONSTRAINT AUTEURS_PK PRIMARY KEY (id);

--------------------------------------------------------
--  Constraints for Table sections
--------------------------------------------------------
ALTER TABLE BO.sections ADD CONSTRAINT SECTIONS_PK PRIMARY KEY (id);

--------------------------------------------------------
--  Constraints for Table genres
--------------------------------------------------------
ALTER TABLE BO.genres ADD CONSTRAINT GENRES_PK PRIMARY KEY (id);

--------------------------------------------------------
--  Constraints for Table livres
--------------------------------------------------------
ALTER TABLE BO.livres ADD CONSTRAINT LIVRES_PK PRIMARY KEY (id);

ALTER TABLE BO.livres
     ADD CONSTRAINT LIVRES_FK1
     FOREIGN KEY (sections_id) REFERENCES SECTIONS (id) ENABLE;

ALTER TABLE BO.livres
     ADD CONSTRAINT LIVRES_FK2
     FOREIGN KEY (auteurs_id) REFERENCES AUTEURS (id) ENABLE;

ALTER TABLE BO.livres
     ADD CONSTRAINT LIVRES_FK3
     FOREIGN KEY (genres_id) REFERENCES GENRES (id) ENABLE;

--------------------------------------------------------
--  Constraints for Table emprunts
--------------------------------------------------------
ALTER TABLE BO.emprunts ADD CONSTRAINT EMPRUNTS_PK PRIMARY KEY (id);

ALTER TABLE BO.emprunts
     ADD CONSTRAINT EMPRUNTS_FK1
     FOREIGN KEY (livres_id) REFERENCES LIVRES (id) ENABLE;

ALTER TABLE BO.emprunts
     ADD CONSTRAINT EMPRUNTS_FK2
     FOREIGN KEY (membres_id) REFERENCES MEMBRES (id) ENABLE;